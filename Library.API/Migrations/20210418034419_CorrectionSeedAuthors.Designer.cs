// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.API.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20210418034419_CorrectionSeedAuthors")]
    partial class CorrectionSeedAuthors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Author", "dbo");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            FirstName = "Marijn",
                            LastName = "Haverbeke",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            FirstName = "Addy",
                            LastName = "Osmani",
                            NationalityId = 2
                        },
                        new
                        {
                            AuthorId = 3,
                            FirstName = "Axel",
                            LastName = "Rauschmayer",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 4,
                            FirstName = "Eric",
                            LastName = "Elliott",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 5,
                            FirstName = "Nicholas C",
                            LastName = "Zakas",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 6,
                            FirstName = "Kyle",
                            LastName = "Simpson",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 7,
                            FirstName = "Richard E",
                            LastName = "Silverman",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 8,
                            FirstName = "Glenn",
                            LastName = "Block",
                            NationalityId = 1
                        });
                });

            modelBuilder.Entity("Entities.AuthorBook", b =>
                {
                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("PublicationId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorBook", "dbo");

                    b.HasData(
                        new
                        {
                            PublicationId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            PublicationId = 2,
                            AuthorId = 2
                        },
                        new
                        {
                            PublicationId = 3,
                            AuthorId = 3
                        },
                        new
                        {
                            PublicationId = 4,
                            AuthorId = 4
                        },
                        new
                        {
                            PublicationId = 5,
                            AuthorId = 5
                        });
                });

            modelBuilder.Entity("Entities.Copy", b =>
                {
                    b.Property<int>("CopyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PublicationId")
                        .HasColumnType("int");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int");

                    b.HasKey("CopyId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("ShelfId");

                    b.ToTable("Copy", "dbo");
                });

            modelBuilder.Entity("Entities.Format", b =>
                {
                    b.Property<int>("FormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormatName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("FormatId");

                    b.ToTable("Format");

                    b.HasData(
                        new
                        {
                            FormatId = 1,
                            FormatName = "Printed",
                            State = false
                        },
                        new
                        {
                            FormatId = 2,
                            FormatName = "CD",
                            State = false
                        },
                        new
                        {
                            FormatId = 3,
                            FormatName = "DVD",
                            State = false
                        },
                        new
                        {
                            FormatId = 4,
                            FormatName = "BluRay",
                            State = false
                        });
                });

            modelBuilder.Entity("Entities.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("NationalityId");

                    b.ToTable("Nationality", "dbo");

                    b.HasData(
                        new
                        {
                            NationalityId = 1,
                            CountryCode = "GB",
                            NationalityName = "British",
                            State = false
                        },
                        new
                        {
                            NationalityId = 2,
                            CountryCode = "AF",
                            NationalityName = "Afghan",
                            State = false
                        },
                        new
                        {
                            NationalityId = 3,
                            CountryCode = "AL",
                            NationalityName = "Albanian",
                            State = false
                        },
                        new
                        {
                            NationalityId = 4,
                            CountryCode = "DZ",
                            NationalityName = "Algerian",
                            State = false
                        },
                        new
                        {
                            NationalityId = 5,
                            CountryCode = "US",
                            NationalityName = "American",
                            State = false
                        });
                });

            modelBuilder.Entity("Entities.Publication", b =>
                {
                    b.Property<int>("PublicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("PublicationId");

                    b.ToTable("Publication", "dbo");
                });

            modelBuilder.Entity("Entities.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("PublisherId");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            PublisherName = "No Starch Press",
                            State = false
                        },
                        new
                        {
                            PublisherId = 2,
                            PublisherName = "O'Reilly Media",
                            State = false
                        },
                        new
                        {
                            PublisherId = 3,
                            PublisherName = "Packt Publishing",
                            State = false
                        },
                        new
                        {
                            PublisherId = 4,
                            PublisherName = "TCK Publishing",
                            State = false
                        },
                        new
                        {
                            PublisherId = 5,
                            PublisherName = "Reed Elsevier",
                            State = false
                        },
                        new
                        {
                            PublisherId = 6,
                            PublisherName = "Penguin Random House",
                            State = false
                        },
                        new
                        {
                            PublisherId = 7,
                            PublisherName = "Harper Collins",
                            State = false
                        },
                        new
                        {
                            PublisherId = 8,
                            PublisherName = "Simon & Schuster",
                            State = false
                        },
                        new
                        {
                            PublisherId = 9,
                            PublisherName = "Phoenix Publishing and Media Company",
                            State = false
                        },
                        new
                        {
                            PublisherId = 10,
                            PublisherName = "Phoenix Yard Books",
                            State = false
                        },
                        new
                        {
                            PublisherId = 11,
                            PublisherName = "Pan Macmillan",
                            State = false
                        },
                        new
                        {
                            PublisherId = 12,
                            PublisherName = "Bloomsbury",
                            State = false
                        },
                        new
                        {
                            PublisherId = 13,
                            PublisherName = "Arbordale Publishing",
                            State = false
                        },
                        new
                        {
                            PublisherId = 14,
                            PublisherName = "Arcade Publishing",
                            State = false
                        },
                        new
                        {
                            PublisherId = 15,
                            PublisherName = "Arcadia Publishing",
                            State = false
                        },
                        new
                        {
                            PublisherId = 16,
                            PublisherName = "B & W Publishing",
                            State = false
                        },
                        new
                        {
                            PublisherId = 17,
                            PublisherName = "Beacon Publishing",
                            State = false
                        },
                        new
                        {
                            PublisherId = 18,
                            PublisherName = "John Blake Publishing",
                            State = false
                        },
                        new
                        {
                            PublisherId = 19,
                            PublisherName = "Capstone Publishers",
                            State = false
                        },
                        new
                        {
                            PublisherId = 20,
                            PublisherName = "Flame Tree Publishing",
                            State = false
                        },
                        new
                        {
                            PublisherId = 21,
                            PublisherName = "Alfaguara",
                            State = false
                        },
                        new
                        {
                            PublisherId = 22,
                            PublisherName = "Educar Editores",
                            State = false
                        },
                        new
                        {
                            PublisherId = 23,
                            PublisherName = "Editorial Norma ",
                            State = false
                        },
                        new
                        {
                            PublisherId = 24,
                            PublisherName = "Mc Graw Hill",
                            State = false
                        },
                        new
                        {
                            PublisherId = 25,
                            PublisherName = "Norma",
                            State = false
                        },
                        new
                        {
                            PublisherId = 26,
                            PublisherName = "Oxford",
                            State = false
                        },
                        new
                        {
                            PublisherId = 27,
                            PublisherName = "Pearson",
                            State = false
                        },
                        new
                        {
                            PublisherId = 28,
                            PublisherName = "Planeta",
                            State = false
                        },
                        new
                        {
                            PublisherId = 29,
                            PublisherName = "Random",
                            State = false
                        },
                        new
                        {
                            PublisherId = 30,
                            PublisherName = "Santillana",
                            State = false
                        },
                        new
                        {
                            PublisherId = 31,
                            PublisherName = "Books and Books",
                            State = false
                        });
                });

            modelBuilder.Entity("Entities.Shelf", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShelvingId")
                        .HasColumnType("int");

                    b.HasKey("ShelfId");

                    b.HasIndex("ShelvingId");

                    b.ToTable("Shelf", "dbo");
                });

            modelBuilder.Entity("Entities.Shelving", b =>
                {
                    b.Property<int>("ShelvingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("High")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ShelvingId");

                    b.ToTable("Shelving", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Book", b =>
                {
                    b.HasBaseType("Entities.Publication");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasIndex("FormatId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book", "dbo");

                    b.HasData(
                        new
                        {
                            PublicationId = 1,
                            Description = "JavaScript lies at the heart of almost every modern web application, from social apps to the newest browser-based games. Though simple for beginners to pick up and play with, JavaScript is a flexible, complex language that you can use to build full-scale applications.",
                            FormatId = 1,
                            ISBN = "9781593275846",
                            NumberOfPages = 472,
                            Published = new DateTime(2014, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 1,
                            SubTitle = "A Modern Introduction to Programming",
                            Title = "Eloquent JavaScript, Second Edition",
                            WebSite = "http://eloquentjavascript.net/"
                        },
                        new
                        {
                            PublicationId = 2,
                            Description = "With Learning JavaScript Design Patterns, you'll learn how to write beautiful, structured, and maintainable JavaScript by applying classical and modern design patterns to the language. If you want to keep your code efficient, more manageable, and up-to-date with the latest best practices, this book is for you.",
                            FormatId = 1,
                            ISBN = "9781449331818",
                            NumberOfPages = 254,
                            Published = new DateTime(2012, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 2,
                            SubTitle = "A JavaScript and jQuery Developer's Guide",
                            Title = "Learning JavaScript Design Patterns",
                            WebSite = "http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/"
                        },
                        new
                        {
                            PublicationId = 3,
                            Description = "Like it or not, JavaScript is everywhere these days-from browser to server to mobile-and now you, too, need to learn the language or dive deeper than you have. This concise book guides you into and through JavaScript, written by a veteran programmer who once found himself in the same position.",
                            FormatId = 1,
                            ISBN = "9781449365035",
                            NumberOfPages = 460,
                            Published = new DateTime(2014, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 2,
                            SubTitle = "An In-Depth Guide for Programmers",
                            Title = "Speaking JavaScript",
                            WebSite = "http://speakingjs.com/"
                        },
                        new
                        {
                            PublicationId = 4,
                            Description = "Take advantage of JavaScript's power to build robust web-scale or enterprise applications that are easy to extend and maintain. By applying the design patterns outlined in this practical book, experienced JavaScript developers will learn how to write flexible and resilient code that's easier-yes, easier-to work with as your code base grows.",
                            FormatId = 1,
                            ISBN = "9781491950296",
                            NumberOfPages = 254,
                            Published = new DateTime(2014, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 2,
                            SubTitle = "Robust Web Architecture with Node, HTML5, and Modern JS Libraries",
                            Title = "Programming JavaScript Applications",
                            WebSite = "http://chimera.labs.oreilly.com/books/1234000000262/index.html"
                        },
                        new
                        {
                            PublicationId = 5,
                            Description = "ECMAScript 6 represents the biggest update to the core of JavaScript in the history of the language. In Understanding ECMAScript 6, expert developer Nicholas C. Zakas provides a complete guide to the object types, syntax, and other exciting changes that ECMAScript 6 brings to JavaScript.",
                            FormatId = 1,
                            ISBN = "9781593277574",
                            NumberOfPages = 278,
                            Published = new DateTime(2016, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 1,
                            SubTitle = "The Definitive Guide for JavaScript Developers",
                            Title = "Understanding ECMAScript 6",
                            WebSite = "https://leanpub.com/understandinges6/read"
                        });
                });

            modelBuilder.Entity("Entities.Magazine", b =>
                {
                    b.HasBaseType("Entities.Publication");

                    b.Property<string>("ISSN")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.ToTable("Magazine", "dbo");
                });

            modelBuilder.Entity("Entities.Author", b =>
                {
                    b.HasOne("Entities.Nationality", "Nationality")
                        .WithMany("Authors")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Entities.AuthorBook", b =>
                {
                    b.HasOne("Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Book", "Book")
                        .WithMany("AuthorsBook")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Entities.Copy", b =>
                {
                    b.HasOne("Entities.Publication", "Publication")
                        .WithMany("Copies")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Shelf", "Shelf")
                        .WithMany("Copies")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Entities.Shelf", b =>
                {
                    b.HasOne("Entities.Shelving", "Shelving")
                        .WithMany("Shelfs")
                        .HasForeignKey("ShelvingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelving");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Book", b =>
                {
                    b.HasOne("Entities.Format", "Format")
                        .WithMany("Books")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Publication", null)
                        .WithOne()
                        .HasForeignKey("Entities.Book", "PublicationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Format");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Entities.Magazine", b =>
                {
                    b.HasOne("Entities.Publication", null)
                        .WithOne()
                        .HasForeignKey("Entities.Magazine", "PublicationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("Entities.Format", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Entities.Nationality", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("Entities.Publication", b =>
                {
                    b.Navigation("Copies");
                });

            modelBuilder.Entity("Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Entities.Shelf", b =>
                {
                    b.Navigation("Copies");
                });

            modelBuilder.Entity("Entities.Shelving", b =>
                {
                    b.Navigation("Shelfs");
                });

            modelBuilder.Entity("Entities.Book", b =>
                {
                    b.Navigation("AuthorsBook");
                });
#pragma warning restore 612, 618
        }
    }
}
